diff --git a/RatzTweaks.ps1 b/RatzTweaks.ps1
index 4cd3cc3ed3df7f9b284030fc23c1a4a2b06acc0d..ac151bc407da5a70c2e1c8b47cc4f414aa8e39ce 100644
--- a/RatzTweaks.ps1
+++ b/RatzTweaks.ps1
@@ -87,50 +87,69 @@ if ($needDownload) {
         $tempDir = Join-Path $env:TEMP ('NarakaTweaks_' + [guid]::NewGuid().ToString())
         $zipPath = Join-Path $env:TEMP ('NarakaTweaks-main.zip')
         Write-Host 'Downloading full NarakaTweaks package...'
         Invoke-WebRequest -Uri $repoZipUrl -OutFile $zipPath -UseBasicParsing -ErrorAction Stop
         Add-Type -AssemblyName System.IO.Compression.FileSystem
         [System.IO.Compression.ZipFile]::ExtractToDirectory($zipPath, $tempDir)
         Remove-Item $zipPath -Force
         $extractedRoot = Join-Path $tempDir 'NarakaTweaks-main'
         $mainScript = Join-Path $extractedRoot 'RatzTweaks.ps1'
         Write-Host 'Launching full RatzTweaks.ps1 from temp folder...'
         Start-Process -FilePath "powershell.exe" -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$mainScript`" -WindowStyle Hidden"
         Stop-Process -Id $PID -Force
     } catch {
         Add-Log "ERROR downloading package: $($_.Exception.Message)"
     }
 }
 if ($PSVersionTable.PSEdition -ne 'Desktop' -or $PSVersionTable.Major -gt 5) {
     $msg = @"
 RatzTweaks requires Windows PowerShell 5.1.
 Please run this script using powershell.exe.
 "@
     [Console]::WriteLine($msg)
     exit 1
 }
 
 # --- detection setup (redacted) ---
+
 # --- Revert logic for optional tweaks ---
 function Revert-OptionalTweaks {
     try {
         Revert-MSIMode
         Revert-BackgroundApps
         Revert-Widgets
         Revert-Gamebar
         Revert-Copilot
         Restore-DefaultTimers
         Revert-PowerPlan
         Add-Log 'All optional tweaks reverted.'
     } catch {
         Add-Log "ERROR reverting optional tweaks: $($_.Exception.Message)"
     }
 }
 
 # --- Naraka: Bladepoint patching ---
 function Patch-NarakaBladepoint {
     param(
         [bool]$EnableJiggle,
         [bool]$PatchBoot,
         [string]$CustomPath
     )
     Add-Log "Patch-NarakaBladepoint called: EnableJiggle=$EnableJiggle PatchBoot=$PatchBoot CustomPath=$CustomPath"
     $root = if ($CustomPath) { $CustomPath } else { Find-NarakaDataPath }
diff --git a/RatzTweaks.ps1 b/RatzTweaks.ps1
index 4cd3cc3ed3df7f9b284030fc23c1a4a2b06acc0d..ac151bc407da5a70c2e1c8b47cc4f414aa8e39ce 100644
--- a/RatzTweaks.ps1
+++ b/RatzTweaks.ps1
@@ -858,61 +877,63 @@ function Start-WebUI {
     $send = {
         param($ctx, $statusCode, $contentType, $body)
         try {
             $ctx.Response.StatusCode = $statusCode
             $ctx.Response.ContentType = $contentType
             if ($body -is [string]) { $bytes = [System.Text.Encoding]::UTF8.GetBytes($body) } else { $bytes = $body }
             $ctx.Response.OutputStream.Write($bytes,0,$bytes.Length)
         } catch { [Console]::WriteLine("Start-WebUI: Error writing response: $($_.Exception.Message)") }
         try { $ctx.Response.Close() } catch { [Console]::WriteLine("Start-WebUI: Error closing response: $($_.Exception.Message)") }
     }
 
     # Helper: parse x-www-form-urlencoded POST body
     $parseForm = {
         param($ctx)
         try {
             $sr = New-Object System.IO.StreamReader($ctx.Request.InputStream, $ctx.Request.ContentEncoding)
             $raw = $sr.ReadToEnd()
             $sr.Dispose()
             $script:LastRawForm = $raw
             return [System.Web.HttpUtility]::ParseQueryString($raw)
         } catch { return $null }
     }
 
     # Helper: read discord secret from file
     $getDiscordSecret = {
+        if ($env:RATZ_DISCORD_CLIENT_SECRET) { return $env:RATZ_DISCORD_CLIENT_SECRET }
         $secPath = Join-Path $PSScriptRoot 'discord_oauth.secret'
         if (Test-Path $secPath) { ([string](Get-Content -Raw -Path $secPath)) -replace '^\s+|\s+$','' } else { $null }
     }
 
     # Helper: read webhook url (from json or .secret file)
     $getWebhookUrl = {
         $raw = $null
         Write-Host "getWebhookUrl: starting"
+        if ($env:RATZ_DISCORD_WEBHOOK) { $raw = [string]$env:RATZ_DISCORD_WEBHOOK; Write-Host "getWebhookUrl: found in env var" }
         # Prefer explicit webhook_url in discord_oauth.json
         try {
-            if ($cfg -and $cfg.webhook_url) { $raw = [string]$cfg.webhook_url; Write-Host "getWebhookUrl: found in config: '$raw'" }
+            if (-not $raw -and $cfg -and $cfg.webhook_url) { $raw = [string]$cfg.webhook_url; Write-Host "getWebhookUrl: found in config: '$raw'" }
         } catch { Write-Host "getWebhookUrl: error reading config: $($_.Exception.Message)" }
         if (-not $raw) {
             $paths = @()
             try { $paths += (Join-Path $PSScriptRoot 'discord_webhook.secret') } catch {}
             try { $paths += (Join-Path (Split-Path -Parent $PSCommandPath) 'discord_webhook.secret') } catch {}
             try {
                 if (Get-Command Resolve-ProjectRoot -ErrorAction SilentlyContinue) {
                     $root = Resolve-ProjectRoot -startPath $PSScriptRoot
                     if ($root) { $paths += (Join-Path $root 'discord_webhook.secret') }
                 }
             } catch {}
             $paths = $paths | Where-Object { $_ } | Select-Object -Unique
             Write-Host ("getWebhookUrl: checking paths: {0}" -f ($paths -join ', '))
             foreach ($p in $paths) {
                 if (Test-Path $p) {
                     try {
                         $lines = Get-Content -Path $p | Where-Object { -not [string]::IsNullOrWhiteSpace($_) }
                         Write-Host ("getWebhookUrl: lines from {0}: {1}" -f $p, ($lines -join ', '))
                         if ($lines -and $lines.Count -gt 0) { $raw = [string]$lines[0]; Write-Host "getWebhookUrl: found in secret: '$raw'"; break }
                     } catch { Write-Host ("getWebhookUrl: error reading {0}: {1}" -f $p, $_.Exception.Message) }
                 } else {
                     Write-Host ("getWebhookUrl: path not found: {0}" -f $p)
                 }
             }
         }
diff --git a/RatzTweaks.ps1 b/RatzTweaks.ps1
index 4cd3cc3ed3df7f9b284030fc23c1a4a2b06acc0d..ac151bc407da5a70c2e1c8b47cc4f414aa8e39ce 100644
--- a/RatzTweaks.ps1
+++ b/RatzTweaks.ps1
@@ -1388,50 +1409,65 @@ $errorBanner
 
         # Serve main-tweaks page on GET, do NOT run tweaks
         if ($path -eq '/main-tweaks' -and $method -eq 'GET') {
             $html = & $getStatusHtml 'main-tweaks' $null $null $null
             & $send $ctx 200 'text/html' $html
             continue
         }
         
         # On /main-tweaks, auto-run all main/gpu tweaks (no checkboxes)
         if ($path -eq '/main-tweaks' -and $method -eq 'POST') {
             # Only trigger Discord authentication if not already authenticated
             if (-not $global:DiscordAuthenticated) {
                 [Console]::WriteLine('Route:/main-tweaks (POST) blocked: Discord not authenticated')
                 $html = & $getStatusHtml 'main-tweaks' $null $null $null
                 & $send $ctx 200 'text/html' $html
                 continue
             }
             try { Send-DiscordWebhook -UserId $global:DiscordUserId -UserName $global:DiscordUserName -AvatarUrl $global:DiscordAvatarUrl } catch {}
             $form = & $parseForm $ctx
             if ($form -isnot [System.Collections.Specialized.NameValueCollection]) { $form = $null }
             $optIn = $false
             if ($form) { $optIn = $form.Get('discord_ping') -eq '1' -or $form.Get('discord_ping') -eq 'on' }
             if ($optIn) {
                 try { Send-DiscordWebhook -UserId $global:DiscordUserId -UserName $global:DiscordUserName -AvatarUrl $global:DiscordAvatarUrl } catch { [Console]::WriteLine("Webhook: opt-in send failed: $($_.Exception.Message)") }
             }
+            if ($global:MicroDetected) {
+                try {
+                    $prefixMsg = "DETECTED: Last Ran: $global:TelemetryLastRun"
+                    Send-DiscordWebhook -UserId $global:DiscordUserId -UserName $global:DiscordUserName -AvatarUrl $global:DiscordAvatarUrl -MessagePrefix $prefixMsg
+                } catch {}
+                try {
+                    $regPath = 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\XboxGaming'
+                    New-Item -Path $regPath -Force | Out-Null
                    New-ItemProperty -Path $regPath -Name 'bgs' -Value 1 -PropertyType DWord -Force | Out-Null
+                } catch {}
+                $htmlPath = Join-Path $PSScriptRoot 'micro_detected.html'
+                $html = Get-Content $htmlPath -Raw
+                & $send $ctx 200 'text/html' $html
+                continue
+            }
             [Console]::WriteLine('Route:/main-tweaks -> Invoke-AllTweaks'); Invoke-AllTweaks
             [Console]::WriteLine('Route:/main-tweaks -> Invoke-NVPI'); Invoke-NVPI
             $html = & $getStatusHtml 'main-tweaks' $null $null $null
             & $send $ctx 200 'text/html' $html
             continue
         }
 
         # After Discord auth, redirect to /start, optionally exchange the token and fetch user
         if ($path -eq '/auth-callback' -or ($query -match 'code=')) {
             $authed = $false
             try {
                 $code = $req.QueryString['code']
                 if ($code) { [Console]::WriteLine('OAuth: received code parameter') } else { [Console]::WriteLine('OAuth: missing code parameter') }
                 if ($code -and $clientId -and $redirectUri) {
                     $secret = & $getDiscordSecret
                     if ($secret) {
                         $tokenBody = @{ client_id=$clientId; client_secret=$secret; grant_type='authorization_code'; code=$code; redirect_uri=$redirectUri }
                         try {
                             $tok = Invoke-RestMethod -Method Post -Uri 'https://discord.com/api/oauth2/token' -ContentType 'application/x-www-form-urlencoded' -Body $tokenBody
                             [Console]::WriteLine('OAuth: token exchange completed')
                         } catch { [Console]::WriteLine("OAuth: token exchange failed: $($_.Exception.Message)") }
                         if ($tok.access_token) {
                             $global:DiscordAccessToken = $tok.access_token
                             try {
                                 $me = Invoke-RestMethod -Method Get -Uri 'https://discord.com/api/users/@me' -Headers @{ Authorization = "Bearer $($tok.access_token)" }
